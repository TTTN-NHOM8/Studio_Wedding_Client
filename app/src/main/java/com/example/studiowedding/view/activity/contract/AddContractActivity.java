package com.example.studiowedding.view.activity.contract;

import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContracts;
import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;
import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.DatePickerDialog;
import android.content.Intent;
import android.os.Bundle;
import android.text.Editable;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.util.Log;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.PopupMenu;
import android.widget.TextView;
import android.widget.Toast;


import com.example.studiowedding.R;
import com.example.studiowedding.adapter.ContractDetailAdapter;
import com.example.studiowedding.model.Contract;
import com.example.studiowedding.model.ContractDetail;
import com.example.studiowedding.model.Customer;
import com.example.studiowedding.network.ApiClient;
import com.example.studiowedding.network.ApiService;
import com.example.studiowedding.utils.FormatUtils;
import com.example.studiowedding.view.activity.detail_contract.AddContractDetailActivity;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

public class AddContractActivity extends AppCompatActivity implements View.OnClickListener {
    private EditText edIdHD,edPaymentStatus,edPickClient,edDateCreate,edDop, edDeposit,edDiscount,edTotal;
    private TextView tvCreateDetailContract;
    private ImageView imgBack;
    private RecyclerView rcv;
    private SwipeRefreshLayout swipeRefreshLayout;
    private Button btnAdd;
    private List<ContractDetail>contractDetailList=new ArrayList<>();
    private ContractDetailAdapter adapter;
    SimpleDateFormat sdf = new SimpleDateFormat( "yyyy-MM-dd");
    SimpleDateFormat sdf2= new SimpleDateFormat("dd/MM/yyyy");


    private int idKH;
    private float totalPrice;

    private String idHDTT="HD202311240914";



    @SuppressLint("MissingInflatedId")
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_add_contract);

        imgBack=findViewById(R.id.imgBackFromAddContract);

        edIdHD=findViewById(R.id.edAddIdContract);
        edPaymentStatus=findViewById(R.id.edPaymentStatus);
        edPickClient=findViewById(R.id.edAddClientContract);
        tvCreateDetailContract=findViewById(R.id.tvCreateDetailContract);
        edDateCreate=findViewById(R.id.edAddDateCreateContract);
        edDop=findViewById(R.id.edAddDOPContract);
        edDeposit=findViewById(R.id.edAddDepositContract);
        edDiscount=findViewById(R.id.edAddDiscountContract);
        edTotal=findViewById(R.id.edAddTotalAmmountContract);
        rcv=findViewById(R.id.rcvDetailContractInAddContract);
        swipeRefreshLayout=findViewById(R.id.srlAddContract);
        btnAdd=findViewById(R.id.btnAddNewContract);

        LinearLayoutManager linearLayoutManager=new LinearLayoutManager(this,LinearLayoutManager.VERTICAL,false);
        rcv.setLayoutManager(linearLayoutManager);
        adapter=new ContractDetailAdapter();
        rcv.setAdapter(adapter);


        imgBack.setOnClickListener(this);
        edPaymentStatus.setOnClickListener(this);
        edPickClient.setOnClickListener(this);
        tvCreateDetailContract.setOnClickListener(this);
        edDop.setOnClickListener(this);
        btnAdd.setOnClickListener(this);

        swipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {
            @Override
            public void onRefresh() {
                getAllDetailContractByIdHDTT();
            }
        });

        autoGenerateIDHD();
        autoGenerateDateCreate();
        getAllDetailContractByIdHDTT();
        onChangeDiscount();



    }

    @Override
    public void onClick(View view) {
        switch (view.getId()){
            case R.id.imgBackFromAddContract:
                finish();
                break;
            case R.id.edPaymentStatus:
                showPopupMenu(view);
                break;
            case R.id.edAddDOPContract:
                try {
                    showDatePicker(edDop);
                } catch (ParseException e) {
                    throw new RuntimeException(e);
                }
                break;
            case R.id.edAddClientContract:
                pickCustomerActivityResultLauncher.launch(new Intent(this,PickClientActivity.class));
                break;
            case R.id.tvCreateDetailContract:
                Intent intent=new Intent(AddContractActivity.this,AddContractDetailActivity.class);
                String idHD=edIdHD.getText().toString().trim();
                intent.putExtra("contractID",idHD);
                Toast.makeText(AddContractActivity.this,"idHD"+idHD,Toast.LENGTH_SHORT).show();
                Log.i("IDHDTT",idHD);

                startActivity(intent);
                break;
            case R.id.btnAddNewContract:
                if(validateForm()>0){
                    try {
                        saveContract();
                    } catch (ParseException e) {
                        throw new RuntimeException(e);
                    }
                }
                break;
        }
    }

    //  Lưu thông tin hợp đồng
    private void saveContract() throws ParseException {
        String idHD=edIdHD.getText().toString();

        String formatNgayThanhToan=edDop.getText().toString().isEmpty() ? null: sdf.format(sdf2.parse(edDop.getText().toString().trim()));
        Date ngayThanhToan = formatNgayThanhToan == null ? null : sdf.parse(formatNgayThanhToan);
        Log.i("tag",""+formatNgayThanhToan);
        Log.i("TAG2",""+ngayThanhToan);


        Float tienCoc=edDeposit.getText().toString().trim().isEmpty() ? null: Float.parseFloat(edDeposit.getText().toString().trim());
        Float giamGia=edDiscount.getText().toString().trim().isEmpty() ? null: Float.parseFloat(edDiscount.getText().toString().trim());
        Float tongTien= Float.valueOf(edTotal.getText().toString());
        String trangThaiThanhToan=edPaymentStatus.getText().toString();
        String trangThaiHopDong="Đang thực hiện";

        Contract contract=new Contract(idHD,formatNgayThanhToan,tienCoc,giamGia,tongTien,trangThaiThanhToan,trangThaiHopDong,idKH);
        insertNewContract(contract);
    }

    //    Popup menu trạng thái thanh toán
    private void showPopupMenu(View v) {
        PopupMenu popupMenu = new PopupMenu(this, v);
        MenuInflater inflater = popupMenu.getMenuInflater();
        inflater.inflate(R.menu.popup_menu_payment_status_contract, popupMenu.getMenu());

        popupMenu.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {
            @Override
            public boolean onMenuItemClick(MenuItem item) {
                switch (item.getItemId()) {
                    case R.id.action_paid:
                        edPaymentStatus.setText("Đã thanh toán");
                        return true;
                    case R.id.action_unpaid:
                        edPaymentStatus.setText("Chưa thanh toán");
                        return true;
                    default:
                        return false;
                }
            }
        });

        popupMenu.show();
    }
    //    Tự động tạo mã HD theo thời gian: HD+yyymmddhhmmss
    private void autoGenerateIDHD() {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmss", Locale.getDefault());
        String currentDateAndTime = sdf.format(new Date());

        String contractID = "HD" + currentDateAndTime;
        edIdHD.setText(contractID);
    }
    //    Tự động khởi tạo ngày tạo:dd/MM/yyyy
    private void autoGenerateDateCreate() {
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy", Locale.getDefault());
        String currentDateAnd = sdf.format(new Date());
        edDateCreate.setText(currentDateAnd);
    }
    //    Dialog date picker
    private void showDatePicker(EditText editText) throws ParseException {
        Calendar calendar = Calendar.getInstance();

        if (editText != null && !TextUtils.isEmpty(editText.getText())) {
            Date currentDate = FormatUtils.parserStringToDate(editText.getText().toString());
            if (currentDate != null) {
                calendar.setTime(currentDate);
            }
        }

        DatePickerDialog datePickerDialog = new DatePickerDialog(
                this,
                (view, year, monthOfYear, dayOfMonth) -> {
                    calendar.set(Calendar.YEAR, year);
                    calendar.set(Calendar.MONTH, monthOfYear);
                    calendar.set(Calendar.DAY_OF_MONTH, dayOfMonth);

                    String selectedDate = FormatUtils.formatDateToString(calendar.getTime());
                    editText.setText(selectedDate);
                },
                calendar.get(Calendar.YEAR),
                calendar.get(Calendar.MONTH),
                calendar.get(Calendar.DAY_OF_MONTH)
        );
        datePickerDialog.show();
    }

    //    Cập nhật lại giá trị tổng tiền khi thay đổi giá trị giảm giá
    private void onChangeDiscount(){
        edDiscount.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {
            }

            @Override
            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
            }

            @Override
            public void afterTextChanged(Editable editable) {
                totalAmount();
            }
        });
    }

    //    Tổng tiền = tổng tiền sản phẩm + dịch vụ - giảm giá
    private void totalAmount(){

        float discount = 0.0f;

        String discountText = edDiscount.getText().toString().trim();
        if (!discountText.isEmpty()) {
            discount = Float.parseFloat(discountText);
        }

        float totalAmount=totalPrice-discount;

        edTotal.setText(String.valueOf(totalAmount));
    }

    //    Tính tổng tiền sản phẩm, dịch vụ
    private float totalPrice(List<ContractDetail> details) {
        float total = 0;
         for (ContractDetail contractDetail : details) {
                total += contractDetail.getProductPrice()+contractDetail.getServicePrice() ;

            }
        return total;
    }

    private int validateForm(){
        int check=1;
        String customerName=edPickClient.getText().toString();
        String deposit=edDeposit.getText().toString();
        String discount=edDiscount.getText().toString();
        String status=edPaymentStatus.getText().toString();


        if(customerName.equalsIgnoreCase("Chọn KH") || status.equalsIgnoreCase("Trạng thái hợp đồng") || deposit.isEmpty() || discount.isEmpty() || contractDetailList.isEmpty()){
            Toast.makeText(this,"Vui nhập/chọn đủ các trường",Toast.LENGTH_SHORT).show();
            check=-1;
        }else{

        }



        return check;
    }

    //Thêm hợp đồng mới
    private void insertNewContract(Contract contract){
        ApiService apiService=ApiClient.getClient().create(ApiService.class);
        Call<Void> call=apiService.insertContract(contract);

        call.enqueue(new Callback<Void>() {
            @Override
            public void onResponse(Call<Void> call, Response<Void> response) {
                if(response.isSuccessful()){
                    Toast.makeText(AddContractActivity.this,"Thêm hợp đồng thành công",Toast.LENGTH_SHORT).show();

                }else{
                    Toast.makeText(AddContractActivity.this,"Lỗi",Toast.LENGTH_SHORT).show();

                }
            }

            @Override
            public void onFailure(Call<Void> call, Throwable t) {
                Log.i("Tag","Lỗi"+t.getMessage());

            }
        });

    }

    // Lấy toàn danh sách HDCT có idHDTamThoi=idHD
    private void getAllDetailContractByIdHDTT(){
        String idHDTT=edIdHD.getText().toString();
        ApiService apiService= ApiClient.getClient().create(ApiService.class);
        Call<List<ContractDetail>> call=apiService.getAllDetailContractByIdHDTT(idHDTT);

        call.enqueue(new Callback<List<ContractDetail>>() {
            @Override
            public void onResponse(Call<List<ContractDetail>> call, Response<List<ContractDetail>> response) {
                if(response.isSuccessful()){
                    contractDetailList.clear();
                    contractDetailList.addAll(response.body());
                    adapter.setContractDetails(contractDetailList);
                    totalPrice = totalPrice(contractDetailList);
                    totalAmount();


                    swipeRefreshLayout.setRefreshing(false);

                }else{
                    Log.i("Tag","Lỗi");
                    swipeRefreshLayout.setRefreshing(false);
                }

            }

            @Override
            public void onFailure(Call<List<ContractDetail>> call, Throwable t) {
                Log.i("Tag","Lỗi"+t.getMessage());
                swipeRefreshLayout.setRefreshing(false);


            }
        });
    }
    private ActivityResultLauncher<Intent> pickCustomerActivityResultLauncher = registerForActivityResult(
            new ActivityResultContracts.StartActivityForResult(),
            result -> {
                if (result.getResultCode() == Activity.RESULT_OK) {
                    Intent data = result.getData();
                    if (data != null) {
                        Customer selectedCustomer = data.getParcelableExtra("customer");

                        if (selectedCustomer != null) {
                            edPickClient.setText(selectedCustomer.getName()+" - "+selectedCustomer.getPhone());
                            idKH=selectedCustomer.getId();
                        }else{
                            Toast.makeText(AddContractActivity.this,"Lỗi",Toast.LENGTH_SHORT).show();

                        }
                    }

                }
            });

    private ActivityResultLauncher<Intent> addDetailContractResultLauncher = registerForActivityResult(
            new ActivityResultContracts.StartActivityForResult(),
            result -> {
                if (result.getResultCode() == Activity.RESULT_OK) {
                    Intent data = result.getData();

                }
            });

    @Override
    protected void onResume() {
        super.onResume();
        getAllDetailContractByIdHDTT();
    }
}